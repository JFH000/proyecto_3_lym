// DO NOT EDIT THIS FILE! IT IS AUTOMATICALLY GENERATED FROM FILE "src/LexerParserRobot201510.gold"
import gold.*;
import gold.structures.*;
import gold.structures.automaton.*;
import gold.structures.bag.*;
import gold.structures.collection.*;
import gold.structures.deque.*;
import gold.structures.disjointset.*;
import gold.structures.graph.*;
import gold.structures.heap.*;
import gold.structures.list.*;
import gold.structures.map.*;
import gold.structures.multimap.*;
import gold.structures.point.*;
import gold.structures.queue.*;
import gold.structures.set.*;
import gold.structures.stack.*;
import gold.structures.tree.*;
import gold.structures.tree.binary.*;
import gold.structures.tree.nary.*;
import gold.structures.tuple.*;
import gold.structures.turingMachine.*;
import gold.swing.*;
import gold.swing.icon.*;
import gold.swing.icon.ajaxload.*;
import gold.swing.icon.famfamfam.*;
import gold.swing.icon.gold.*;
import gold.swing.icon.jlfgr.*;
import gold.swing.icon.wikimedia.*;
import gold.swing.icon.windows.*;
import gold.swing.look.*;
import gold.swing.util.*;
import gold.test.*;
import gold.test.automaton.*;
import gold.test.general.*;
import gold.test.graph.*;
import gold.util.*;
import gold.visualization.*;
import gold.visualization.automaton.*;
import gold.visualization.graph.*;
import gold.visualization.quadtree.*;
import gold.visualization.turingMachine.*;
import gold.visualization.util.*;
import java.lang.*;
import org.apfloat.*;
import static gold.util.GReflection.*;
@SuppressWarnings("all")
public final class LexerParserRobot201510 {
  static {
    gold.swing.util.GUtilities.installGoldLookAndFeel();
  }
  public static Object chars(Object string) {
    int $line=0;
    Object $result=null;
    $try:try {
      gold.structures.set.ISet $v1=$newSet();
      int $v3=$int(0);
      int $v4=$int($invokeMethod("length",string,new Object[]{}))-1;
      $v2:for (int i=$v3; i<=$v4; i++) {
        $v1.add($invokeMethod("charAt",string,new Object[]{i}));
      }
      $result=$v1;
      if (true) break $try;
      $line=5;
      $rethrow(new RuntimeException("The function \"chars(string:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot201510.class,"chars",$line);
    }
    return $result;
  }
  public static Object charsStrings(Object strings) {
    int $line=0;
    Object $result=null;
    $try:try {
      gold.structures.set.ISet $v5=$newSet(GCollections.emptySet());
      $v6:for (Object s:GCollections.unmodifiableCollection(strings)) {
        $v5.union(GCollections.unmodifiableSet(((java.lang.Iterable)(LexerParserRobot201510.chars(s)))));
      }
      $result=$v5;
      if (true) break $try;
      $line=6;
      $rethrow(new RuntimeException("The function \"charsStrings(strings:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot201510.class,"charsStrings",$line);
    }
    return $result;
  }
  public static Object elements(Object array) {
    int $line=0;
    Object $result=null;
    $try:try {
      gold.structures.set.ISet $v7=$newSet();
      int $v9=$int(0);
      int $v10=$int($opAbsolY(array))-1;
      $v8:for (int i=$v9; i<=$v10; i++) {
        $v7.add($getArrayValue(array,new Object[]{i}));
      }
      $result=$v7;
      if (true) break $try;
      $line=7;
      $rethrow(new RuntimeException("The function \"elements(array:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot201510.class,"elements",$line);
    }
    return $result;
  }
  public static Object get1(java.lang.Iterable $v11) {
    int $line=0;
    Object $result=null;
    $try:try {
      java.util.Iterator $v12=GCollections.unmodifiableCollection($v11).iterator();
      Object r=$v12.next();
      Object i=$v12.next();
      $result=r;
      if (true) break $try;
      $line=8;
      $rethrow(new RuntimeException("The function \"get1(\u27E8r,i\u27E9:java.lang.Iterable)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot201510.class,"get1",$line);
    }
    return $result;
  }
  public static Object get2(java.lang.Iterable $v13) {
    int $line=0;
    Object $result=null;
    $try:try {
      java.util.Iterator $v14=GCollections.unmodifiableCollection($v13).iterator();
      Object r=$v14.next();
      Object i=$v14.next();
      $result=i;
      if (true) break $try;
      $line=9;
      $rethrow(new RuntimeException("The function \"get2(\u27E8r,i\u27E9:java.lang.Iterable)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot201510.class,"get2",$line);
    }
    return $result;
  }
  public static GDeterministicTransducer lexer=null;
  static {
    int $line=0;
    $line=14;
    $try:try {
      lexer=$defaultValue(GDeterministicTransducer.class);
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot201510.class,null,$line);
    }
  }
  public static GPushdownAutomaton parser=null;
  static {
    int $line=0;
    $line=15;
    $try:try {
      parser=$defaultValue(GPushdownAutomaton.class);
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot201510.class,null,$line);
    }
  }
  public static void main(String[] args) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=18;
      Object currentString=$fix("");
      $line=20;
      lexer=$cast(GDeterministicTransducer.class,$fix(Lexer202510.createLexer()));
      $line=31;
      LexerParserRobot201510.testLexerParser($cast(gold.structures.automaton.ITransducer.class,lexer),$cast(gold.structures.automaton.IPushdownAutomaton.class,parser));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot201510.class,"main",$line);
    }
  }
  public static Object testLexer(ITransducer M) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=36;
      java.util.Scanner sc=null;
      sc=$invokeConstructor(java.util.Scanner.class,new Object[]{$invokeField(System.class,"in",true,null)});
      $line=37;
      String string=null;
      string=$defaultValue(String.class);
      $line=38;
      String input=null;
      input=$defaultValue(String.class);
      $line=41;
      Object inputA=$fix(LexerParserRobot201510.elements(((gold.structures.automaton.ITransducer)M).getInputAlphabet()));
      $line=42;
      input=$cast(String.class,$fix(""));
      $line=43;
      System.out.println($message(new Object[]{"----------------------------"}));
      $line=44;
      System.out.println($message(new Object[]{"Enter one or more lines. End with a single line with $"}));
      $line=45;
      System.out.println($message(new Object[]{"If you want to stop testing, enter EXIT"}));
      $line=46;
      string=$cast(String.class,$fix(((java.util.Scanner)sc).nextLine()));
      $line=47;
      while (true) {
        if (!(!$opEqualY(string,"EXIT"))) break;
        $line=48;
        string=$cast(String.class,$fix($opAdditY(string," \n ")));
        $line=49;
        input=$cast(String.class,$fix(""));
        $line=50;
        while (true) {
          if (!(!$opEqualY(((java.lang.String)string).charAt($int(0)),'$'))) break;
          $line=51;
          input=$cast(String.class,$fix($opAdditY(input,string)));
          $line=52;
          string=$cast(String.class,$fix($opAdditY(((java.util.Scanner)sc).nextLine()," \n  ")));
        }
        $line=54;
        if ($opSbsetY(LexerParserRobot201510.chars(input),inputA)) {
          $line=55;
          Object currentString=$fix("");
          $line=56;
          Object images=$fix($invokeConstructor(GArrayList.class,new Object[]{}));
          $line=58;
          Object result=$fix(Lexer202510.runLexer(M,input));
          $line=61;
          Object ok=$fix(LexerParserRobot201510.get1($cast(java.lang.Iterable.class,result)));
          $line=62;
          images=$fix(LexerParserRobot201510.get2($cast(java.lang.Iterable.class,result)));
          $line=63;
          Object tokenStream=$fix(((gold.structures.automaton.ITransducer)M).getOutputString());
          $line=65;
          System.out.println($message(new Object[]{$opAdditY($opAdditY("The input was ",(($bool(ok))?(""):("not ")))," accepted by the lexer.")}));
          $line=66;
          if ($bool(ok)) {
            $line=67;
            System.out.println($message(new Object[]{$opAdditY("Token Stream:  ",tokenStream)}));
            $line=68;
            System.out.println($message(new Object[]{$opAdditY("Strings: ",images)}));
          }
          else {
            $line=69;
            System.out.println($message(new Object[]{$opAdditY("Partial token Stream ",tokenStream)}));
          }
        }
        else {
          $line=71;
          System.out.println($message(new Object[]{$opAdditY("Input contains invalid characters: ",$opDiffeY(LexerParserRobot201510.chars(input),inputA))}));
        }
        $line=73;
        System.out.println($message(new Object[]{"----------------------------"}));
        $line=75;
        System.out.println($message(new Object[]{"Enter one or more lines. End with a single line with $"}));
        $line=76;
        System.out.println($message(new Object[]{"If you want to stop testing, enter EXIT"}));
        $line=77;
        string=$cast(String.class,$fix(((java.util.Scanner)sc).nextLine()));
      }
      $line=80;
      System.out.println($message(new Object[]{"Good bye"}));
      $line=81;
      System.out.println($message(new Object[]{""}));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot201510.class,"testLexer",$line);
    }
    return $result;
  }
  public static Object testLexerParser(ITransducer M, IPushdownAutomaton P) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=92;
      java.util.Scanner sc=null;
      sc=$invokeConstructor(java.util.Scanner.class,new Object[]{$invokeField(System.class,"in",true,null)});
      $line=93;
      String string=null;
      string=$defaultValue(String.class);
      $line=94;
      String input=null;
      input=$defaultValue(String.class);
      $line=97;
      Object inputA=$fix(LexerParserRobot201510.elements(((gold.structures.automaton.ITransducer)M).getInputAlphabet()));
      $line=98;
      System.out.println($message(new Object[]{"ERTRHGF"}));
      $line=99;
      System.out.println($message(new Object[]{inputA}));
      $line=102;
      input=$cast(String.class,$fix(""));
      $line=105;
      System.out.println($message(new Object[]{"----------------------------"}));
      $line=106;
      System.out.println($message(new Object[]{"Enter one or more lines. End with a single line with $"}));
      $line=107;
      System.out.println($message(new Object[]{"If you want to stop testing, enter EXIT"}));
      $line=108;
      string=$cast(String.class,$fix(((java.util.Scanner)sc).nextLine()));
      $line=113;
      while (true) {
        if (!(!$opEqualY(string,"EXIT"))) break;
        $line=115;
        string=$cast(String.class,$fix($opAdditY(string,"  \n ")));
        $line=116;
        input=$cast(String.class,$fix(""));
        $line=117;
        while (true) {
          if (!(!$opEqualY(((java.lang.String)string).charAt($int(0)),'$'))) break;
          $line=118;
          input=$cast(String.class,$fix($opAdditY(input,string)));
          $line=119;
          string=$cast(String.class,$fix($opAdditY(((java.util.Scanner)sc).nextLine()," \n ")));
        }
        $line=122;
        Object option=$fix("");
        $line=123;
        while (true) {
          if (!(!$opMembrY(option,GCollections.asSet("1","2","3")))) break;
          $line=124;
          System.out.println($message(new Object[]{"What do you want to do?"}));
          $line=125;
          System.out.println($message(new Object[]{"1. Lexer only?"}));
          $line=126;
          System.out.println($message(new Object[]{"2. Lexer and parser?"}));
          $line=127;
          System.out.println($message(new Object[]{"3. Parser?"}));
          $line=128;
          option=$fix(((java.util.Scanner)sc).nextLine());
        }
        $line=130;
        Object stringOut=$fix("");
        $line=131;
        if ($opMembrY(option,GCollections.asSet("1","2"))) {
          $line=132;
          if ($opSbsetY(LexerParserRobot201510.chars(input),inputA)) {
            $line=133;
            Object currentString=$fix("");
            $line=134;
            Object images=$fix($invokeConstructor(GArrayList.class,new Object[]{}));
            $line=136;
            Object result=$fix(Lexer202510.runLexer(M,input));
            $line=139;
            Object ok=$fix(LexerParserRobot201510.get1($cast(java.lang.Iterable.class,result)));
            $line=140;
            images=$fix(LexerParserRobot201510.get2($cast(java.lang.Iterable.class,result)));
            $line=141;
            Object tokenStream=$fix(((gold.structures.automaton.ITransducer)M).getOutputString());
            $line=146;
            System.out.println($message(new Object[]{$opAdditY($opAdditY("The input was ",(($bool(ok))?(""):("not ")))," accepted by the lexer.")}));
            $line=147;
            if ($bool(ok)) {
              $line=148;
              System.out.println($message(new Object[]{$opAdditY("Token Stream:  ",tokenStream)}));
              $line=149;
              System.out.println($message(new Object[]{$opAdditY("Strings: ",images)}));
              $line=150;
              if ($opEqualY(option,"2")) {
                $line=151;
                ok=$fix(((gold.structures.automaton.IPushdownAutomaton)P).acceptsString($cast(java.lang.String.class,tokenStream)));
                $line=152;
                System.out.println($message(new Object[]{$opAdditY("Parser result: ",(($bool(ok))?("accepted "):("rejected ")))}));
              }
            }
            else {
              $line=154;
              System.out.println($message(new Object[]{$opAdditY("Partial token Stream: ",tokenStream)}));
            }
          }
          else {
            $line=156;
            System.out.println($message(new Object[]{$opAdditY("Input contains invalid characters: ",$opDiffeY(LexerParserRobot201510.chars(input),inputA))}));
          }
        }
        $line=166;
        System.out.println($message(new Object[]{"----------------------------"}));
        $line=168;
        System.out.println($message(new Object[]{"Enter one or more lines. End with a single line with $"}));
        $line=169;
        System.out.println($message(new Object[]{"If you want to stop testing, enter EXIT"}));
        $line=170;
        string=$cast(String.class,$fix(((java.util.Scanner)sc).nextLine()));
      }
      $line=173;
      System.out.println($message(new Object[]{"Good bye"}));
      $line=174;
      System.out.println($message(new Object[]{""}));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,LexerParserRobot201510.class,"testLexerParser",$line);
    }
    return $result;
  }
}
